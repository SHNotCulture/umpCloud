package com.ump.util;

import org.apache.commons.lang.RandomStringUtils;
import sun.misc.BASE64Decoder;

import java.io.*;
import java.net.InetAddress;
import java.net.NetworkInterface;
import java.security.SecureRandom;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * 
 * 字符串操作的工具类
 * 
 * 
 */
public class StringUtil3 {
	private static String strChineseFirstPY = "";
	public static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
	public static SimpleDateFormat sdf_ss = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	public static String newTime = sdf.format(new Date());
//	public static String newTimeSS = sdf_ss.format(new Date());
	public static long DAY_MS = 24 * 60 * 60 * 1000;
	/**
	 * 将一字符串转换成拼音首字母
	 * 
	 * @since 1.1
	 * @param strText
	 *            字符串
	 * @return 字符串对应的拼音首字母
	 */
	public static String getFirstPY(String strText) {
		if (strText == null || strText.trim().length() == 0)
			return "";
		String ret = "";
		for (int i = 0; i < strText.length(); i++) {
			char ch = strText.charAt(i);
			if ('\u4E00' <= ch && '\u9FA5' >= ch)
				ret = ret + strChineseFirstPY.charAt(ch - 19968);
			else
				ret = ret + ch;
		}

		return ret;
	}

	/**
	 * 替换字符串
	 * 
	 * @since 1.1
	 * @param strSc
	 *            需要进行替换的字符串
	 * @param oldStr
	 *            源字符串
	 * @param newStr
	 *            替换后的字符串
	 * @return 替换后对应的字符串
	 */
	public static String replace(String strSc, String oldStr, String newStr) {
		String ret = strSc;
		if (ret != null && oldStr != null && newStr != null) {
			ret = strSc.replaceAll(oldStr, newStr);
		}
		return ret;
	}

	/**
	 * 替换字符串，修复java.lang.String类的replaceAll方法时第一参数是字符串常量正则时(如："address".
	 * replaceAll("dd","$");)的抛出异常：java.lang.StringIndexOutOfBoundsException:
	 * String index out of range: 1的问题。
	 * 
	 * @since 1.2
	 * @param strSc
	 *            需要进行替换的字符串
	 * @param oldStr
	 *            源字符串
	 * @param newStr
	 *            替换后的字符串
	 * @return 替换后对应的字符串
	 */
	public static String replaceAll(String strSc, String oldStr, String newStr) {
		int i = -1;
		while ((i = strSc.indexOf(oldStr)) != -1) {
			strSc = new StringBuffer(strSc.substring(0, i)).append(newStr).append(strSc.substring(i + oldStr.length())).toString();
		}
		return strSc;
	}

	/**
	 * 将字符串转换成HTML格式的字符串
	 * 
	 * @since 1.1
	 * @param str
	 *            需要进行转换的字符串
	 * @return 转换后的字符串
	 */
	public static String toHtml(String str) {
		String html = str;
		if (str == null || str.length() == 0) {
			return "";
		} else {
			html = replace(html, "&", "&amp;");
			html = replace(html, "<", "&lt;");
			html = replace(html, ">", "&gt;");
			html = replace(html, "\r\n", "\n");
			html = replace(html, "\n", "<br>\n");
			html = replace(html, "\"", "&quot;");
			html = replace(html, " ", "&nbsp;");
			return html;
		}
	}

	/**
	 * 将HTML格式的字符串转换成常规显示的字符串
	 * 
	 * @since 1.1
	 * @param str
	 *            需要进行转换的字符串
	 * @return 转换后的字符串
	 */
	public static String toText(String str) {
		String text = str;
		if (str == null || str.length() == 0) {
			return "";
		} else {
			text = replace(text, "&amp;", "&");
			text = replace(text, "&lt;", "<");
			text = replace(text, "&gt;", ">");
			text = replace(text, "<br>\n", "\n");
			text = replace(text, "<br>", "\n");
			text = replace(text, "&quot;", "\"");
			text = replace(text, "&nbsp;", " ");
			return text;
		}
	}

	/**
	 * 将一字符串数组以某特定的字符串作为分隔来变成字符串
	 * 
	 * @since 1.0
	 * @param strs
	 *            字符串数组
	 * @param token
	 *            分隔字符串
	 * @return 以token为分隔的字符串
	 */
	public static String join(String[] strs, String token) {
		if (strs == null)
			return null;
		StringBuffer sb = new StringBuffer();
		for (int i = 0; i < strs.length; i++) {
			if (i != 0)
				sb.append(token);
			sb.append(strs[i]);
		}
		return sb.toString();
	}

	/**
	 * 将一字符串以某特定的字符串作为分隔来变成字符串数组
	 * 
	 * @since 1.0
	 * @param str
	 *            需要拆分的字符串("@12@34@56")
	 * @param token
	 *            分隔字符串("@")
	 * @return 以token为分隔的拆分开的字符串数组
	 */
	public static String[] split(String str, String token) {
		String temp = str.substring(1, str.length());
		return temp.split(token);
	}

	/**
	 * 验证字符串合法性
	 * 
	 * @since 1.0
	 * @param str
	 *            需要验证的字符串
	 * @param test
	 *            非法字符串（如："~!#$%^&*()',;:?"）
	 * @return true:非法;false:合法
	 */
	public static boolean check(String str, String test) {
		if (str == null || str.equals(""))
			return true;
		boolean flag = false;
		for (int i = 0; i < test.length(); i++) {
			if (str.indexOf(test.charAt(i)) != -1) {
				flag = true;
				break;
			}
		}
		return flag;
	}

	/**
	 * 将数值型字符串转换成Integer型
	 * 
	 * @since 1.0
	 * @param str
	 *            需要转换的字符型字符串
	 * @param ret
	 *            转换失败时返回的值
	 * @return 成功则返回转换后的Integer型值；失败则返回ret
	 */
	public static Integer String2Integer(String str, Integer ret) {
		try {
			return Integer.parseInt(str);
		} catch (NumberFormatException e) {
			return ret;
		}
	}

	/**
	 * 将数值型转换成字符串
	 * 
	 * @since 1.0
	 * @param it
	 *            需要转换的Integer型值
	 * @param ret
	 *            转换失败的返回值
	 * @return 成功则返回转换后的字符串；失败则返回ret
	 */
	public static String Integer2String(Integer it, String ret) {
		try {
			return Integer.toString(it);
		} catch (NumberFormatException e) {
			return ret;
		}
	}

	/**
	 * 比较两字符串大小(ASCII码顺序)
	 * 
	 * @since 1.1
	 * @param str1
	 *            参与比较的字符串1
	 * @param str2
	 *            参与比较的字符串2
	 * @return str1>str2:1;str1<str2:-1;str1=str2:0
	 */
	public static int compare(String str1, String str2) {//
		if (str1.equals(str2)) {
			return 0;
		}
		int str1Length = str1.length();
		int str2Length = str2.length();
		int length = 0;
		if (str1Length > str2Length) {
			length = str2Length;
		} else {
			length = str1Length;
		}
		for (int i = 0; i < length; i++) {
			if (str1.charAt(i) > str2.charAt(i)) {
				return 1;
			}
		}
		return -1;
	}

	/**
	 * 将阿拉伯数字的钱数转换成中文方式
	 * 
	 * @since 1.1
	 * @param num
	 *            需要转换的钱的阿拉伯数字形式
	 * @return 转换后的中文形式
	 */
	public static String num2Chinese(double num) {
		String result = "";
		String str = Double.toString(num);
		if (str.contains(".")) {
			String begin = str.substring(0, str.indexOf("."));
			String end = str.substring(str.indexOf(".") + 1, str.length());
			byte[] b = begin.getBytes();
			int j = b.length;
			for (int i = 0, k = j; i < j; i++, k--) {
				result += getConvert(begin.charAt(i));
				if (!"零".equals(result.charAt(result.length() - 1) + "")) {
					result += getWei(k);
				}
				System.out.println(result);

			}
			for (int i = 0; i < result.length(); i++) {
				result = result.replaceAll("零零", "零");
			}
			if ("零".equals(result.charAt(result.length() - 1) + "")) {
				result = result.substring(0, result.length() - 1);
			}
			result += "元";
			byte[] bb = end.getBytes();
			int jj = bb.length;
			for (int i = 0, k = jj; i < jj; i++, k--) {
				result += getConvert(end.charAt(i));
				if (bb.length == 1) {
					result += "角";
				} else if (bb.length == 2) {
					result += getFloat(k);
				}
			}
		} else {
			byte[] b = str.getBytes();
			int j = b.length;
			for (int i = 0, k = j; i < j; i++, k--) {
				result += getConvert(str.charAt(i));
				result += getWei(k);
			}
		}
		return result;
	}

	private static String getConvert(char num) {
		if (num == '0') {
			return "零";
		} else if (num == '1') {
			return "一";
		} else if (num == '2') {
			return "二";
		} else if (num == '3') {
			return "三";
		} else if (num == '4') {
			return "四";
		} else if (num == '5') {
			return "五";
		} else if (num == '6') {
			return "六";
		} else if (num == '7') {
			return "七";
		} else if (num == '8') {
			return "八";
		} else if (num == '9') {
			return "九";
		} else {
			return "";
		}
	}

	private static String getFloat(int num) {
		if (num == 2) {
			return "角";
		} else if (num == 1) {
			return "分";
		} else {
			return "";
		}
	}

	private static String getWei(int num) {
		if (num == 1) {
			return "";
		} else if (num == 2) {
			return "十";
		} else if (num == 3) {
			return "百";
		} else if (num == 4) {
			return "千";
		} else if (num == 5) {
			return "万";
		} else if (num == 6) {
			return "十";
		} else if (num == 7) {
			return "百";
		} else if (num == 8) {
			return "千";
		} else if (num == 9) {
			return "亿";
		} else if (num == 10) {
			return "十";
		} else if (num == 11) {
			return "百";
		} else if (num == 12) {
			return "千";
		} else if (num == 13) {
			return "兆";
		} else {
			return "";
		}
	}

	/**
	 * 将字符串的首字母改为大写
	 * 
	 * @since 1.2
	 * @param str
	 *            需要改写的字符串
	 * @return 改写后的字符串
	 */
	public static String firstToUpper(String str) {
		return str.substring(0, 1).toUpperCase() + str.substring(1);
	}

	/**
	 * 16进制数字字符集
	 */
	private static String hexString = "0123456789ABCDEF";

	/*
	 * 将字符串编码成16进制数字,适用于所有字符（包括中文）
	 */
	public static String stringToHex(String str) {
		// 根据默认编码获取字节数组
		byte[] bytes = str.getBytes();
		StringBuilder sb = new StringBuilder(bytes.length * 2);
		// 将字节数组中每个字节拆解成2位16进制整数
		for (int i = 0; i < bytes.length; i++) {
			sb.append(hexString.charAt((bytes[i] & 0xf0) >> 4));
			sb.append(hexString.charAt((bytes[i] & 0x0f) >> 0));
		}
		return sb.toString();
	}

	/**
	 * 将16进制数字解码成字符串,适用于所有字符（包括中文）
	 */
	public static String hexToString(String bytes) {
		ByteArrayOutputStream baos = new ByteArrayOutputStream(bytes.length() / 2);
		// 将每2位16进制整数组装成一个字节
		for (int i = 0; i < bytes.length(); i += 2)
			baos.write((hexString.indexOf(bytes.charAt(i)) << 4 | hexString.indexOf(bytes.charAt(i + 1))));
		return new String(baos.toByteArray());
	}

	/**
	 * 整型转十六进制
	 */
	public static String intToHex(int integer) {
		StringBuffer buf = new StringBuffer(2);
		if (((int) integer & 0xff) < 0x10) {
			buf.append("0");
		}
		buf.append(Long.toString((int) integer & 0xff, 16));
		return buf.toString();
	}

	/**
	 * 十六进制转整型
	 */
	public static Integer hexToInt(String s) {
		return Integer.parseInt(s, 16);
	}

	/** 十六进制补空字符 */
	public static String getF(int len) {
		String str = "";
		for (int i = 0; i < len; i++) {
			str += "FF";
		}
		return str;
	}

	public static String shortToHex(int j) {
		byte[] uchBuf = new byte[2];
		uchBuf[1] = (byte) (j >> 0 * 8 & 0x00FF);
		uchBuf[0] = (byte) (j >> 1 * 8 & 0x00FF);
		return bytesToHexString(uchBuf);
	}

	/*
	 * Convert byte[] to hex
	 * string.这里我们可以将byte转换成int，然后利用Integer.toHexString(int)来转换成16进制字符串。
	 * 
	 * @return hex string
	 */
	public static String bytesToHexString(byte[] src) {
		StringBuilder stringBuilder = new StringBuilder("");
		if (src == null || src.length <= 0) {
			return null;
		}
		for (int i = 0; i < src.length; i++) {
			int v = src[i] & 0xFF;
			String hv = Integer.toHexString(v);
			if (hv.length() < 2) {
				stringBuilder.append(0);
			}
			stringBuilder.append(hv);
		}
		return stringBuilder.toString().toUpperCase();
	}

	/**
	 * Convert hex string to byte[]
	 * 
	 * @param hexString
	 *            the hex string
	 * @return byte[]
	 */
	public static byte[] hexStringToBytes(String hexString) {
		if (hexString == null || hexString.equals("")) {
			return null;
		}
		hexString = hexString.toUpperCase();
		int length = hexString.length() / 2;
		char[] hexChars = hexString.toCharArray();
		byte[] d = new byte[length];
		for (int i = 0; i < length; i++) {
			int pos = i * 2;
			d[i] = (byte) (charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));
		}
		return d;
	}

	/**
	 * Convert char to byte
	 * 
	 * @param c
	 *            char
	 * @return byte
	 */
	private static byte charToByte(char c) {
		return (byte) "0123456789ABCDEF".indexOf(c);
	}

	public static String verifyCRC16(String data) {
		int crc_val = 0xFFFF;
		char[] arrayData = new char[data.length()];
		for (int i = 0; i < arrayData.length; i++) {
			arrayData[i] = data.charAt(i);
		}
		for (int i = arrayData.length - 1; i >= 0; i--) {
			crc_val ^= arrayData[i];
			for (int k = 0; k < 8; k++) {
				if ((crc_val & 0x0001) != 0)
					crc_val = (crc_val >>> 1) ^ 0xA001;
				else
					crc_val = crc_val >>> 1;
			}
		}
		// System.out.println(crc_val);
		return shortToHex(crc_val);
	}

	/** 字符串转unicode 部分字符串*/
	public static String strToUnicode(String str) {
		char[] arChar = str.toCharArray();
		int iValue = 0;
		String uStr = "";
		for (int i = 0; i < arChar.length; i++) {
			iValue = (int) str.charAt(i);
			if (iValue <= 256) {
				uStr += "\\" + Integer.toHexString(iValue);
			} else {
				uStr += "\\u" + Integer.toHexString(iValue);
			}
		}
		return uStr;
	}

	/** 字符串转unicode 全部字符串*/
	public static String string2Unicode(String s) {
		try {
			StringBuffer out = new StringBuffer("");
			byte[] bytes = s.getBytes("unicode");
			for (int i = 2; i < bytes.length - 1; i += 2) {
				out.append("u");
				String str = Integer.toHexString(bytes[i + 1] & 0xff);
				for (int j = str.length(); j < 2; j++) {
					out.append("0");
				}
				String str1 = Integer.toHexString(bytes[i] & 0xff);

				out.append(str);
				out.append(str1);
				out.append(" ");
			}
			return out.toString().toUpperCase();
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return null;
		}
	}

	/** unicode转字符串 */
	public static String unicode2String(String unicodeStr) {
		StringBuffer sb = new StringBuffer();
		String str[] = unicodeStr.toUpperCase().split("U");
		for (int i = 0; i < str.length; i++) {
			if (str[i].equals(""))
				continue;
			char c = (char) Integer.parseInt(str[i].trim(), 16);
			sb.append(c);
		}
		return sb.toString();
	}

	/** 二进制转十六进制 */
	public static String binary2hex(String bString) {
		if (bString == null || bString.equals("") || bString.length() % 8 != 0)
			return null;
		StringBuffer tmp = new StringBuffer();
		int iTmp = 0;
		for (int i = 0; i < bString.length(); i += 4) {
			iTmp = 0;
			for (int j = 0; j < 4; j++) {
				iTmp += Integer.parseInt(bString.substring(i + j, i + j + 1)) << (4 - j - 1);
			}
			tmp.append(Integer.toHexString(iTmp));
		}
		return tmp.toString();
	}

	/** 十六进制转二进制 */
	public static String hex2binary(String hexString) {
		if (hexString == null || hexString.length() % 2 != 0)
			return null;
		String bString = "", tmp;
		for (int i = 0; i < hexString.length(); i++) {
			tmp = "0000" + Integer.toBinaryString(Integer.parseInt(hexString.substring(i, i + 1), 16));
			bString += tmp.substring(tmp.length() - 4);
		}
		return bString;
	}
	
	/**
	 * 不满足日期的要求
	 * 不能为空，第一个数字不为0，长度不大于32位
	 * @param str
	 * @return
	 */
	public static boolean isNotDate(String str)
	{
		if (str == null || str.trim().equals("") )
		{
			return true;
		}
		Pattern pattern = Pattern.compile("^(\\d{1,4})(-|\\/)(\\d{1,2})\\2(\\d{1,2})$");
		if (!pattern.matcher(str).matches())
		{
			pattern = Pattern.compile("^(((20[0-3][0-9]-(0[13578]|1[02])-(0[1-9]|[12][0-9]|3[01]))|(20[0-3][0-9]-(0[2469]|11)-(0[1-9]|[12][0-9]|30))) (20|21|22|23|[0-1][0-9]):[0-5][0-9]:[0-5][0-9])$");
		}
		return !pattern.matcher(str).matches();
	}
	
	 public static boolean isValidDate(String str) {
         boolean convertSuccess=true;
         SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
         try {
            format.setLenient(false);
            format.parse(str);
         } catch (ParseException e) {
           // e.printStackTrace();
        	 // 如果throw java.text.ParseException或者NullPointerException，就说明格式不对
            convertSuccess=false;
        } 
        return convertSuccess;
	 }
	/**
	 * 是否是普通单号
	 * 不能为空，且小于32位
	 * @param str
	 * @return
	 */
	public static boolean isNotCommonNumber(String str)
	{
		if (str == null || str.trim().equals("") || str.length()>32)
		{
			return true;
		}
		return false;
	}
	
	/**
	 * 为空或者长度超过32位
	 * @return
	 */
	public static boolean isNullOrLong32(String str)
	{
		if (str == null || str.trim().equals("") || str.length()>32)
		{
			return true;
		}
		return false;
	}
	
	public static boolean isNullOrLong225(String str)
	{
		if (str == null || str.trim().equals("") || str.length()>225)
		{
			return true;
		}
		return false;
	}
	
	public static boolean isNullOrLong255(String str)
	{
		if (str == null || str.trim().equals("") || str.length()>255)
		{
			return true;
		}
		return false;
	}
	
	/**
	 * 只判断长度是否超过32位，如果为空则忽略
	 * 
	 * @param str
	 * @return
	 */
	public static boolean isLong32(String str)
	{
		if (str!=null&&!str.trim().equals("")&&str.length()>32)
		{
			return true;
		}
		return false;
	}
	
	
	/**
	 * 只判断长度是否超过225位，如果为空则忽略
	 * 
	 * @param str
	 * @return
	 */
	public static boolean isLong225(String str)
	{
		if (str!=null&&!str.trim().equals("")&&str.length()>225)
		{
			return true;
		}
		return false;
	}
	
	/**
	 * 只判断长度是否超过255位，如果为空则忽略
	 * 
	 * @param str
	 * @return
	 */
	public static boolean isLong255(String str)
	{
		if (str!=null&&!str.trim().equals("")&&str.length()>255)
		{
			return true;
		}
		return false;
	}
	
	public static boolean isNotLongStr(String str)
	{
		if (str == null || str.trim().equals("") || str.length()>225)
		{
			return true;
		}
		return false;
	}
	
	public static Integer parseInt(String str)
	{
		try
		{
			return Integer.parseInt(str);
		}
		catch ( Exception e )
		{
			return null;
		}
	}
	public static Double parseDouble(String str)
	{
		try
		{
			return Double.parseDouble(str);
		}
		catch ( Exception e )
		{
			return null;
		}
	}
	
	/**
	 * 解析日期时间
	 * 如果不合法，则返回null
	 * @param str
	 * @return
	 */
	public static Date parseDate(String str)
	{
		SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try
		{
			return format.parse(str);
		}
		catch ( Exception e )
		{
			return null;
		}
	}
	
	public static String getCreateTime(String str)
	{
		SimpleDateFormat format=new SimpleDateFormat(str);
		try
		{
			return format.format(new Date());
		}
		catch ( Exception e )
		{
			return null;
		}
	}
	
	/**
	 * 是否是空字符串
	 * @param str
	 * @return
	 */
	public static boolean isNull(String str)
	{
		if (str == null || str.trim().equals(""))
		{
			return true;
		}
		return false;
	}
	
	
	public static boolean isNullStr(String str)
	{
		if (str == null || str.trim().equals(""))
		{
			return true;
		}
		return false;
	}
	
	
	public static String ischeck(String str)
	{
		if (str == null || str.trim().equals(""))
		{
			return null;
		}
		return trim(str);
	}
	

	public static String trim(String str)
	{
		if (str == null)
			return "";
		else
			return str.trim();
	}

	/**
	 * 获取长整型值
	 * 
	 * @param strLong
	 * @return long
	 */
	public static long getLong(String strLong)
	{
		long value = 0;
		if (strLong != null && strLong.length() > 0)
		{
			int index = strLong.indexOf(".") == -1 ? strLong.length() : strLong.indexOf(".");
			value = Long.parseLong(strLong.substring(0, index));
		}
		return value;
	}

	/**
	 * 获取整型值
	 * 
	 * @param strInt
	 * @return int
	 */
	public static int getInt(String strInt)
	{
		int value = 0;
		if (strInt != null && strInt.length() > 0)
		{
			int index = strInt.indexOf(".") == -1 ? strInt.length() : strInt.indexOf(".");
			value = Integer.parseInt(strInt.substring(0, index));
		}
		return value;
	}

	public static String unionStringByArry(String[] arry, String split)
	{
		if (arry != null)
		{
			StringBuffer buffer = new StringBuffer();
			for (String attr : arry)
			{
				if (attr == null || "".equals(attr))
					continue;
				buffer.append(attr).append(split);
			}
			return buffer.toString();
		}
		else
			return "";
	}

	public static String[] genArrayByString(String str, String split)
	{
		return str.split(split);
	}
	
	/**
	 * 当前时间加时间
	 * @return
	 */
	public static String newTime(Integer time){
		long currentTime = System.currentTimeMillis() + time;
		Date date = new Date(currentTime);
		DateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String nowTime="";
		nowTime= df.format(date);
		return nowTime;
	}
	/**
	 * 给定时间加几分钟
	 * @param day
	 * @param x
	 * @return
	 */
	 public static String newDate(Date date, Integer minute){
		 SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		 Calendar ca= Calendar.getInstance();
		 ca.setTime(date);
		 ca.add(Calendar.MINUTE, minute);
		 return sdf.format(ca.getTime());
	 }

	 /**
     * 计算2个时间相差几天
     * @param beginDate  起始时间
     * @param endDate 结束时间
     * @return
     */
    public static Integer dayDiff(Date beginDate, Date endDate)
    {
        Long diffTime = endDate.getTime() - beginDate.getTime();
        return Integer.parseInt(diffTime / DAY_MS + "");
    }

    public static Integer compareDate(Date date1, Date date2)
    {
        Long diffTime = date1.getTime() - date2.getTime();
        return Integer.parseInt(diffTime / 60000 + "");
    }
    
	/**
	 * 验证邮箱地址是否正确
	 * 
	 * @param email
	 * @return
	 */
	public static boolean checkEmail(String email) {
		boolean flag = false;
		try {
			String check = "^([a-z0-9A-Z]+[-|\\.]?)+[a-z0-9A-Z]@([a-z0-9A-Z]+(-[a-z0-9A-Z]+)?\\.)+[a-zA-Z]{2,}$";
			Pattern regex = Pattern.compile(check);
			Matcher matcher = regex.matcher(email);
			flag = matcher.matches();
		} catch (Exception e) {
			flag = false;
		}

		return flag;
	}
	
	/**
	 * 验证账号是否正确
	 * 
	 * @param email
	 * @return
	 */
	public static boolean checkCode(String username) {
		boolean flag = false;
		try {
			String check = "^[a-zA-Z0-9_-]{0,32}$";
			Pattern regex = Pattern.compile(check);
			Matcher matcher = regex.matcher(username);
			flag = matcher.matches();
		} catch (Exception e) {
			flag = false;
		}

		return flag;
	}
	

	/**
	 * 验证手机号码
	 * @param mobiles
	 * @return [0-9]{5,9}
	 */
	public static boolean isMobileNO(String mobiles) {
		boolean flag = false;
		try {
			Pattern p = Pattern
					.compile("^((13[0-9])|(15[^4,\\D])|(18[0,5-9]))\\d{8}$");
			Matcher m = p.matcher(mobiles);
			flag = m.matches();
		} catch (Exception e) {
			flag = false;
		}
		return flag;
	}

	public static boolean isNumeric(String str){
		   Pattern pattern = Pattern.compile("[0-9]*");
		   Matcher isNum = pattern.matcher(str);
		   if( !isNum.matches() ){
		       return false; 
		   } 
		   return true; 
		}
	
	
	/**
	 * 随机生成字符串
	 * @param length
	 *  字符串长度
	 * @return
	 * 2015/07/02 ouyshifeng
	 */
	public static final String randomString(int length)
	{
		Random randGen = null;
		char[] numbersAndLetters = null;
		if (length < 1) {
			return null;
		}
		if (randGen == null) {
			randGen = new Random();
			numbersAndLetters = ("0123456789abcdefghijklmnopqrstuvwxyz"
					+ "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ").toCharArray();
		}
		char[] randBuffer = new char[length];
		for (int i = 0; i < randBuffer.length; i++) {
			randBuffer[i] = numbersAndLetters[randGen.nextInt(71)];
		}
		return new String(randBuffer);
	}
	
	/**
	 * 随机生成字符串
	 * @param length
	 *  字符串长度
	 * @return
	 * 2015/07/02 ouyshifeng
	 */
	public static final String randomNumber(int length)
	{
		StringBuilder sb = new StringBuilder(length);
		String POSSIBLE_CHARS="0123456789";
        SecureRandom random = new SecureRandom();
        for (int i = 0; i < length; i++) {  
            sb.append(POSSIBLE_CHARS.charAt(random.nextInt(POSSIBLE_CHARS.length())));  
        }  
        return sb.toString(); 
	}
	//两个日期之间相差的秒数

	public static int calLastedTime(Date startDate) {
		  SimpleDateFormat dfs = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
		  long between = 0;
		  long a = new Date().getTime();
		  long b = startDate.getTime();
		  between = (a - b);// 得到两者的毫秒数
		  int c = (int)((a - b) / 1000);
		  long day = between / (24 * 60 * 60 * 1000);
		  long hour = (between / (60 * 60 * 1000) - day * 24);
		  long min = ((between / (60 * 1000)) - day * 24 * 60 - hour * 60);
		  long s = (between / 1000 - day * 24 * 60 * 60 - hour * 60 * 60 - min * 60);
		  long ms = (between - day * 24 * 60 * 60 * 1000 - hour * 60 * 60 * 1000- min * 60 * 1000 - s * 1000);
		  System.out.println(day + "天" + hour + "小时" + min + "分" + s + "秒" + ms + "毫秒");
		  return c;
	 }
	
	 /**
	  * 小时差
	  * @param date
	  * @param i
	  * @return
	  */
   public static Date getBeforeHost(Date date, int i){
	   	Calendar calendar = new GregorianCalendar();
	   	calendar.setTime(date);
	   	calendar.add(calendar.HOUR, i);
	   	date = calendar.getTime(); 
       return date;  
   } 
   
	 /**
	  * 天数差
	  * @param date
	  * @param i
	  * @return
	  */
    public static Date getBeforeDay(Date date, int i){
    	Calendar calendar = new GregorianCalendar();
    	calendar.setTime(date);
    	calendar.add(calendar.DAY_OF_MONTH, i);
    	date = calendar.getTime(); 
        return date;  
    }  
    
    /**
	  * 月数数差
	  * @param date
	  * @param i
	  * @return
	  */
    public static Date getBeforeMonth(Date date, int i)
    {  
	   	Calendar calendar = new GregorianCalendar();
	   	calendar.setTime(date);
	   	calendar.add(calendar.MONTH, i);
	   	date = calendar.getTime(); 
	    return date;  
    }  
   
     /**
	  * 年数差
	  * @param date
	  * @param i
	  * @return
	  */
	 public static Date getBeforeYear(Date date, int i)
	 {  
	   	Calendar calendar = new GregorianCalendar();
	   	calendar.setTime(date);
	   	calendar.add(calendar.YEAR, i);
	   	date = calendar.getTime(); 
		return date;  
	 }  
	    
    /**  
     * 计算两个日期之间相差的天数  
     * @param smdate 较小的时间 
     * @param bdate  较大的时间 
     * @return 相差天数 
     * @throws ParseException
     */    
    public static int daysBetween(Date smdate, Date bdate) throws ParseException
    {    
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        smdate=sdf.parse(sdf.format(smdate));  
        bdate=sdf.parse(sdf.format(bdate));  
        Calendar cal = Calendar.getInstance();
        cal.setTime(smdate);    
        long time1 = cal.getTimeInMillis();                 
        cal.setTime(bdate);    
        long time2 = cal.getTimeInMillis();         
        long between_days=(time2-time1)/(1000*3600*24);  
       return Integer.parseInt(String.valueOf(between_days));
    }    

    public static String dateDiff(String startTime, String endTime)
    {
    	//按照传入的格式生成一个simpledateformate对象
    	long nd = 1000*24*60*60;//一天的毫秒数
    	long nh = 1000*60*60;//一小时的毫秒数
    	long nm = 1000*60;//一分钟的毫秒数
    	long ns = 1000;//一秒钟的毫秒数
    	long diff;
    	String result = null;
    	if(isNull(startTime) || isNull(endTime))
    		return "0";
    	try {
	    	//获得两个时间的毫秒时间差异
	    	diff = sdf_ss.parse(endTime).getTime() - sdf_ss.parse(startTime).getTime();
	    	long day = diff/nd;//计算差多少天
	    	long hour = diff%nd/nh;//计算差多少小时
	    	long min = diff%nd%nh/nm;//计算差多少分钟
	    	long sec = diff%nd%nh%nm/ns;//计算差多少秒
	    	//输出结果
	    	result = day+"天"+hour+"时"+min+"分"+sec+"秒";
    	} catch (ParseException e) {
    		e.printStackTrace();
    	}
    	return result;
    } 
    
	/** 对页面参数编码 */
	public static String enCode(String str) {
		try {
			if(!isNull(str))
				return java.net.URLEncoder.encode(str, "UTF-8");
			else
				return "";
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return "";
		}
	}
	/** 对页面参数解码 */
	public static String deCode(String str) {
		try {
			return java.net.URLDecoder.decode(str, "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return "";
		}
	}

	public static String enCodetoString(String str) {
		try {
			return new String(str.getBytes(), "UTF-8");
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return "";
		}
	}

	public static String getOrderNumber(int length) {
		int r1=(int)(Math.random()*(10));//产生2个0-9的随机数
		int r2=(int)(Math.random()*(10));
		long now = System.currentTimeMillis();//一个13位的时间戳
		String paymentID = RandomStringUtils.randomNumeric(length)+ RandomStringUtils.randomNumeric(length)+ String.valueOf(now);// 订单ID
		return paymentID;
	}
    /** 
     * 把中文转成Unicode码 
     * @param str 
     * @return 
     */  
    public static String chinaToUnicode(String str){
    	if(str == null || "".equals(str))
    		return str;
        String result="";
        for (int i = 0; i < str.length(); i++){  
            int chr1 = (char) str.charAt(i);  
            if(chr1>=19968&&chr1<=171941){//汉字范围 \u4e00-\u9fa5 (中文)  
                result+="\\u" + Integer.toHexString(chr1);
            }else{  
                result+=str.charAt(i);  
            }  
        }  
        return result;  
    }  
    /** 
     * 把Unicode码 转成中文  这个有问题啊   alex
     * @param str 
     * @return 
     */ 
    public static String unicodeToChina(String utfString){
    	if(utfString == null)
    		return "";
        StringBuilder sb = new StringBuilder();
        int i = -1;  
        int pos = 0;  
          
        while((i=utfString.indexOf("\\u", pos)) != -1){  
            sb.append(utfString.substring(pos, i));  
            if(i+5 < utfString.length()){  
                pos = i+6;  
                sb.append((char) Integer.parseInt(utfString.substring(i+2, i+6), 16));
                sb.append((utfString.substring(i+6, utfString.length()))); 
            }  
        }  
        if(isNull(sb.toString()))
        	sb.append(utfString);
        return sb.toString();  
    } 
    
    /** 
     * 把Unicode码 转成中文  上面那个不用了，用这个
     * @param str 
     * @return 
     */ 
    public static String unicodeToChinas(String utfString){
        StringBuilder sb = new StringBuilder();
        int i = -1;  
        int pos = 0;  
        while(pos < utfString.length()){
        	if((i=utfString.indexOf("\\u", pos)) == pos){            
        		if(i+5 < utfString.length()){  
        			pos = i+6;  
        			sb.append((char) Integer.parseInt(utfString.substring(i+2, i+6), 16));
        		}  
        	}else{
        		sb.append(utfString.substring(pos, pos + 1));
        		pos ++;
        	}
        }
        return sb.toString();  
    } 
    
   
    
    /** 
     * 判断是否为中文字符 
     * @param c 
     * @return 
     */  
    public  boolean isChinese(char c) {  
        Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);
        if (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS
                || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS
                || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A
                || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION
                || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION
                || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) {
            return true;  
        }  
        return false;  
    }  
    
    /**
     * 判断是否
     * @param key
     * @return
     */
    public static String integerCodeToStr(Integer key){
        String result="";
        if(key==null){
        	result="暂无数据";
        }else{
        	if(key==0) result="否"; else result="是";
        }
        return result;  
    }  
    
    
//	   TypeList typelist = getTypeList();
//	   for(Option option: typelist.getOptions())
//	   {
//		   if(option.getValue() == )
//		   {
//			   option.getText();
//		   }
//	   }    
    
    
    /**
     * 充值冲正
     * @param args
     * @throws UnsupportedEncodingException
     * @throws ParseException
     */
    public static String OPER_TYPE(Integer key){
    	String result="";
    	if(key==null){
    		result="暂无数据";
    	}else{
    		if(key==1){
        		result="充值";
        	}else if(key==2){
        		result="冲正";
        	}else if(key==3){
        		result="退款";
        	}
    	}
    	
		return result;
    }
    
    /**
     * 充值方式
     * @param args
     * @throws UnsupportedEncodingException
     * @throws ParseException
     */
    public static String PAY_TYPE(Integer key){
    	String result="";
    	if(key==null){
    		result="暂无数据";
    	}else{
	    	if(key==1){
	    		result="现金";
	    	}else if(key==2){
	    		result="电子支付";
	    	}
    	}
		return result;
    }
    
    /**
     * cvv校验
     * @param cardCode
     * @return
     */
    public static String CVV_CHECK(String cardCode){
    	int CVV = 999;
    	for(int i=0; i<cardCode.length(); i++)
    	{
    		String codefrist = cardCode.substring(i, i+1);
        	CVV = Integer.valueOf(codefrist)^CVV;
        	String CVVBinary = Integer.toBinaryString(CVV);
        	for(int j=0; j < 8; j++)
        	{
        		CVVBinary = Integer.toBinaryString(CVV);
        		CVV>>>=1;
                if(CVVBinary.substring(CVVBinary.length()-1, CVVBinary.length()).equals("1"))
                	CVV = CVV^999;
        	}
    	}
    	return String.valueOf(CVV&999);
    }
    
    /**
     * 车牌验证
     * @param carNum
     * @return
     */
    public static boolean validateCarNum(String carNum){
    	String[] provence = new String[] { "京", "津", "冀", "晋", "贵", "辽", "吉", "黑", "沪", "苏", "浙", "皖", "闽", "赣", "鲁", "豫", "鄂", "湘", "粤", "桂", "琼", "渝","川", "黔", "滇", "藏", "陕", "甘", "青", "宁", "新", "港", "澳", "蒙" };
    	boolean result = false;
    	String reg = "[\u4e00-\u9fa5]{1}[A-Z]{1}[A-Z_0-9]{5}";
    	//校验规则用这个 ouyshf 2015-12-16
    	String regs = "[\u4e00-\u9fa5]{1}[a-zA-Z]{1}[a-zA-Z_0-9]{4}[a-zA-Z_0-9_\u4e00-\u9fa5]$|^[a-zA-Z]{2}\\d{7}";
    	boolean firstChar = false;
    	if (carNum.length() > 0) {
    		firstChar = Arrays.asList(provence).contains(carNum.substring(0, 1));
    	}
    	try{
    	Pattern p = Pattern.compile(regs);
    	Matcher m = p.matcher(carNum);
    	if (m.matches() && firstChar) {
    		result = true;
    	}else{
    		result = false;
    	}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    	return result;
    }
    
    // 整型判断 数值不能大于1000000000
	public static boolean isDecimal(String str)
	{
		if (str == null || "".equals(str))
			return false;
		Pattern pattern = Pattern.compile("[1-9]?\\d{1,8}(\\.\\d+)?");
		return pattern.matcher(str).matches();
	}

	// 整型判断 数值不能大于999999999
	public static boolean isInteger(String str)
	{
		if (str == null)
			return false;
		Pattern pattern = Pattern.compile("[1-9]{1}[\\d]{0,8}");
		return pattern.matcher(str).matches();
	}

	// 整型判断 数值不能大于999999999 包含0
	public static boolean isInt0(String str)
	{
		if (str == null)
			return false;
		Pattern pattern = Pattern.compile("[0-9]{1}[\\d]{0,8}");
		return pattern.matcher(str).matches();
	}

	public static boolean isNeInteger(String str)
	{
		if (str == null)
			return false;
		Pattern pattern = Pattern.compile("^\\d+$|-\\d+$");
		return pattern.matcher(str).matches();
	}
    
	/**
	 * 不满足小数的要求
	 * 不能为空，第一个数字不为0，长度不大于32位
	 * @param str
	 * @return
	 */
	public static boolean isNotDouble(String str)
	{
		if (str == null || str.trim().equals("") )
		{
			return true;
		}
		Pattern pattern = Pattern.compile("^ [ \\d ] ?(0\\.\\d+) ||([0-9][0-9]*(\\.\\d+)?)$");
		return !pattern.matcher(str).matches();
	}
	
	
	/**
	 * 从阿里云解析图片
	 * @param path, parkId
	 */
	public static String OSS_Parse(String path, Integer parkId)
	{
		if(isNull(path)) return "";
//		String urlString = "eparking.oss-cn-shenzhen.aliyuncs.com/"+parkId+"/";
		String urlString = "/"+parkId+"/";
		if(path.length() <= 8){
			return path;
		}
		String fileBox1 = path.substring(0, 8);
		String fileBox2 = path.substring(8, 10);
		String[] pathStrings = path.split("_");
		String fileBox3 ="";
		String fileBox4 ="";
		if(pathStrings.length >= 3){
			fileBox3 = pathStrings[1];
			fileBox4 = pathStrings[2];
		}
		urlString += fileBox1+"/"+fileBox3+"/"+fileBox4+"/"+fileBox2+"/"+path;
		return urlString;
	}
	
	/**
	 * 日期加减 ——日
	 * @param args
	 * @throws UnsupportedEncodingException
	 * @throws ParseException
	 */
	public static String dateModified(String inDate, Integer day){
		String str = "";
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		try {
		    Date myDate = formatter.parse(inDate);
		    Calendar c = Calendar.getInstance();
		    c.setTime(myDate);
		    c.add(Calendar.DAY_OF_YEAR, day);
		    myDate = c.getTime();
		    str = formatter.format(myDate);
		    System.out.println(formatter.format(myDate));
		} catch (ParseException e1) {
		    e1.printStackTrace();
		}
		return str;
	}
	
	/**
	 * 日期加减——月
	 * @param args
	 * @throws UnsupportedEncodingException
	 * @throws ParseException
	 */
	public static String monthModified(String inDate, Integer day){
		String str = "";
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM");
		try {
		    Date myDate = formatter.parse(inDate);
		    Calendar c = Calendar.getInstance();
		    c.setTime(myDate);
		    c.add(Calendar.MONTH, day);
		    myDate = c.getTime();
		    str = formatter.format(myDate);
		    System.out.println(formatter.format(myDate));
		} catch (ParseException e1) {
		    e1.printStackTrace();
		}
		return str;
	}
	
	/**
	 * 日期加减——年
	 */
	public static String yearModified(String inDate, Integer day){
		String str = "";
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy");
		try {
		    Date myDate = formatter.parse(inDate);
		    Calendar c = Calendar.getInstance();
		    c.setTime(myDate);
		    c.add(Calendar.YEAR, day);
		    myDate = c.getTime();
		    str = formatter.format(myDate);
		    System.out.println(formatter.format(myDate));
		} catch (ParseException e1) {
		    e1.printStackTrace();
		}
		return str;
	}
    
	/**
	 * 判断日期月份相差几个月
	 * @param args
	 * @throws UnsupportedEncodingException
	 * @throws ParseException
	 */
	public static Integer monthNum(String oneTime, String twoTime){
		Integer num = 0;
		String ot = new String(oneTime);
        String o[] = ot.split("-");
        Integer o1 = Integer.valueOf(o[0]);
        Integer o2 = Integer.valueOf(o[1]);
        
        String tt = new String(twoTime);
        String t[] = tt.split("-");
        Integer t1 = Integer.valueOf(t[0]);
        Integer t2 = Integer.valueOf(t[1]);
        num = (t1-o1)*12+(t2-o2);
		return num;
	}
	
	/**
	 * 判断日期年份相差几年
	 * @param args
	 * @throws UnsupportedEncodingException
	 * @throws ParseException
	 */
	public static Integer yearNum(String oneTime, String twoTime){
		Integer num = 0;
		Integer y1 = Integer.valueOf(oneTime);
		Integer y2 = Integer.valueOf(twoTime);
        num = y1 - y2;
		return num;
	}
	
	/**
	 *当前日期推算往前或往后几个月时间
	 */
	public static String monthModified(Integer m){
		String str = "";
		Date myDate = new Date();
		Calendar c = Calendar.getInstance();
		c.setTime(myDate);
		c.add(Calendar.MONTH, m);
		myDate = c.getTime();
		str = sdf_ss.format(myDate);
		System.out.println(sdf_ss.format(myDate));
		return str;
	}
	
	/**
	 * 密钥加密
	 *当前日期推算往前或往后几小时
	 */
	public static String monthHOUR(Integer m){
		SimpleDateFormat sdf_hh = new SimpleDateFormat("yyyyMMddHH");
		String str = "";
		Date myDate = new Date();
		Calendar c = Calendar.getInstance();
		c.setTime(myDate);
		c.add(Calendar.HOUR, m);
		myDate = c.getTime();
		str = sdf_hh.format(myDate);
//		System.out.println(sdf_hh.format(myDate));
		return str;
	}
	
	/**
	 * json解析
	 * @param str
	 * @return
	 */
	public static Map<String, String> json(String param){
		//System.out.println("param:"+param);
		String str = param.substring(param.indexOf("{")+1, param.length());
		str = str.substring(0,str.length()-1);
        String strArray[] = str.split(",");
        Map<String, String> strMap = new HashMap<String, String>();
        for (int i = 0; i < strArray.length; i++) {
			String keys = strArray[i];
			String key = keys.split(":")[0].substring(1,keys.split(":")[0].length()-1);
			String value = null;
//			System.out.println("ouyewferwfrchadhiwhd: "+keys);
			if(!isNull(keys.substring(keys.indexOf(":"),keys.length()))){
				if(isNull(keys.split(":")[1]) || "\"\"".equals(keys.split(":")[1]))
					value = null;
				else if("\"".equals(keys.split(":")[1].substring(0,1)))	//值是string
						value = keys.split(":")[1].substring(1,keys.split(":")[1].length()-1).trim();
					 else 
						 value = keys.split(":")[1].trim(); //值不是string
				
				//if(keys.split(":")[1].length() >= 3)
				//	value = keys.split(":")[1].substring(1,keys.split(":")[1].length()-1).trim();
				//else if(isNull(keys.split(":")[1]) || "\"\"".equals(keys.split(":")[1])){
				//	value = null;
				//}else 
				//	value = keys.split(":")[1].trim();
			}
			strMap.put(key, value);
			//System.out.println(key+":"+value);
		}
        return strMap;
	}
	
	public static String getUUID(){
		String s = UUID.randomUUID().toString();
		//去掉"-"符号
	    return s.substring(0,8)+s.substring(9,13)+s.substring(14,18)+s.substring(19,23)+s.substring(24);
	} 
	
	/**
	 * 获取本机IP
	 * @return
	 */
	public static String IP(){
		 String sIP = null;
		 try{  
            InetAddress address = InetAddress.getLocalHost();
            NetworkInterface ni = NetworkInterface.getByInetAddress(address);
            //ni.getInetAddresses().nextElement().getAddress();  
            sIP = address.getHostAddress();  
        }catch(Exception e){
            e.printStackTrace();  
        }  
		return sIP;
	}
	
	public static boolean GenerateImage(String imgStr, String imgFilePath) {// 对字节数组字符串进行Base64解码并生成图片
        if (imgStr == null) // 图像数据为空
            return false;
        BASE64Decoder decoder = new BASE64Decoder();
        try {
            // Base64解码
            byte[] bytes = decoder.decodeBuffer(imgStr);
            for (int i = 0; i < bytes.length; ++i) {
                if (bytes[i] < 0) {// 调整异常数据
                    bytes[i] += 256;
                }
            }
            // 生成jpeg图片
            OutputStream out = new FileOutputStream(imgFilePath);
            out.write(bytes);
            out.flush();
            out.close();
            return true;
        } catch (Exception e) {
            return false;
        }
    }
	
	public static boolean CreateFile(String destFileName) {
	    File file = new File(destFileName);
	    if (file.exists()) {  
	     System.out.println("创建单个文件" + destFileName + "失败，目标文件已存在！");
	     return false;  
	    }  
	    if (destFileName.endsWith(File.separator)) {
	     System.out.println("创建单个文件" + destFileName + "失败，目标不能是目录！");
	     return false;  
	    }  
	    if (!file.getParentFile().exists()) {  
	     System.out.println("目标文件所在路径不存在，准备创建。。。");
	     if (!file.getParentFile().mkdirs()) {  
	      System.out.println("创建目录文件所在的目录失败！");
	      return false;  
	     }  
	    }  
	  
	    // 创建目标文件  
	    try {  
	     if (file.createNewFile()) {  
	      System.out.println("创建单个文件" + destFileName + "成功！");
	      return true;  
	     } else {  
	      System.out.println("创建单个文件" + destFileName + "失败！");
	      return false;  
	     }  
	    } catch (IOException e) {
	     e.printStackTrace();  
	     System.out.println("创建单个文件" + destFileName + "失败！");
	     return false;  
	    }  
	}  
	  
	  
	  
	public static boolean createDir(String destDirName) {
	    File dir = new File(destDirName);
	    if(dir.exists()) {  
	     System.out.println("创建目录" + destDirName + "失败，目标目录已存在！");
	     return false;  
	    }  
	    if(!destDirName.endsWith(File.separator))
	     destDirName = destDirName + File.separator;
	    // 创建单个目录  
	    if(dir.mkdirs()) {  
	     System.out.println("创建目录" + destDirName + "成功！");
	     return true;  
	    } else {  
	     System.out.println("创建目录" + destDirName + "成功！");
	     return false;  
	    }  
	}  
	  
	  
	  
	public static String createTempFile(String prefix, String suffix, String dirName) {
	    File tempFile = null;
	    try{  
	    if(dirName == null) {  
	     // 在默认文件夹下创建临时文件  
	     tempFile = File.createTempFile(prefix, suffix);
	     return tempFile.getCanonicalPath();  
	    }  
	    else {  
	     File dir = new File(dirName);
	     // 如果临时文件所在目录不存在，首先创建  
	     if(!dir.exists()) {  
	      if(!createDir(dirName)){  
	       System.out.println("创建临时文件失败，不能创建临时文件所在目录！");
	       return null;  
	      }  
	     }  
	     tempFile = File.createTempFile(prefix, suffix, dir);
	     return tempFile.getCanonicalPath();  
	    }  
	    } catch(IOException e) {
	     e.printStackTrace();  
	     System.out.println("创建临时文件失败" + e.getMessage());
	     return null;  
	    }  
	}  

	/** 判断车牌开始字符是否有汉字 **/
	public static boolean hasHz(String s) {
		boolean result = false;
		if (s != null && !s.equals("")) {
			byte[] bytes = s.getBytes();
			if (bytes[0] < 0)
				result = true;
		}
		return result;
	}
	
	/** 格式化车牌，去掉开始的汉字 */
	public static String formatCarPlate(String carPlate) {
		if (carPlate != null && !carPlate.equals("")) {
			byte[] bytes = carPlate.getBytes();
			if (bytes[0] < 0)
				carPlate = carPlate.substring(1).trim();
		}
		return carPlate;
	}
	
	public static void main(String[] args) throws UnsupportedEncodingException, ParseException {
//		System.out.println(getUUID());
//		System.out.println(json("params={\"parkId\":\"114\",\"phone\":\"13713813200\"}"));
		String uc = chinaToUnicode("周小勇入口1fd小");
		System.out.println(uc);
		System.out.println(unicodeToChinas(uc));
		 // 创建目录  
//	    String dirName = "d:/test/test0/test1";  
//	    StringUtil.createDir(dirName);  
//	    // 创建文件  
//	    String fileName = dirName + "/test2/testFile.txt";  
//	    StringUtil.CreateFile(fileName);  
//	    // 创建临时文件  
//	    String prefix = "temp";  
//	    String suffix = ".txt";  
//	    for(int i = 0; i < 10; i++) {  
//	     System.out.println("创建了临时文件:" + StringUtil.createTempFile(prefix, suffix, dirName));  
//	    }  
	}
}